#!/bin/bash

SHUCKVER="1.1"
# shuck version 1.1
# http://github.com/thwarted/shuck/

# Copyright 2009 Andrew Bakun
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at
#    http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License. 

usage() {
    cat >&2 <<EOF
shuck version $SHUCKVER
shuck output unless the job appears to fail

Usage:
    $0 -h | --help
    $0 "<cmd>"
    $0 -c "<cmd>"
    $0 <cmd> <arg> ...

Run <cmd>.  Ignore any output unless it exits with a non-zero exit status or 
produces output on stderr.

Insert the following at the top of your crontab(5) to only be emailed output 
from failed commands:
SHELL=/full/path/to/shuck

Set the envirvonment variable SHUCKOPTS to a colon separated list of the 
following options to change the behavior:
    env     include a list of the environment in the output
EOF
}

if [ "$1" = '-h' -o "$1" = '--help' ]; then
    usage
    exit 0
fi

# grab the path set by the parent shell
REQUESTEDPATH=$PATH

opt_includeenv="${SHUCKOPTS/*env*/1}"
opt_sendemail="${SHUCKOPTS/*email*/1}" # unimplemented

# set our own path to avoid security issues
SHUCKPATH=/bin:/usr/bin
PATH=$SHUCKPATH
export PATH

# were we invoked like /bin/sh is?
# cron should invoke us with -c "<cmd>"
RUNTHROUGHSH=0
if [ "$#" -eq 2 -a "$1" = '-c' ]; then
    RUNTHROUGHSH=1
    CMD="$2"
elif [ "$#" -eq 1 ]; then
    RUNTHROUGHSH=1
    CMD="$1"
else
    CMD="$@"
fi

if [ -z "$CMD" ]; then
    # short circuit if there is no command to run
    exit 0
fi

# create a private directry to store our output
WORKDIR=`mktemp -d /tmp/xshuck.XXXXXXXXXX`

STDOUT=$WORKDIR/shuck.stdout.$$
STDERR=$WORKDIR/shuck.stderr.$$
XTRACE=$WORKDIR/shuck.trace.$$
ENVLIST=$WORKDIR/shuck.env.$$

# generate a unique prefix for tracing
XTRACEPREFIX="+$WORKDIR: "
if [ "$RUNTHROUGHSH" = 1 ]; then
    PATH=$REQUESTEDPATH
    export PATH
    /bin/bash -c "set > $ENVLIST ; PS4='$XTRACEPREFIX' ; set -x ; $CMD" >$STDOUT 2>$XTRACE.tmp
    RESULT=$?
else
    PATH=$REQUESTEDPATH
    export PATH
    (
        set > $ENVLIST
        PS4="$XTRACEPREFIX"
        set -x
        "$@"
    ) >$STDOUT 2>$XTRACE.tmp
    RESULT=$?
fi
PATH=$SHUCKPATH
export PATH

# build a pattern that matches the PS4 we set, including nested subshells
TRACEPATTERN="^${XTRACEPREFIX:0:1}\\+${XTRACEPREFIX:1}"

# was there stderr output, distinct from our tracing lines?
grep -v "$TRACEPATTERN" $XTRACE.tmp > $STDERR

# build a nice status message
FAIL1=""
FAIL2=""
if [ $RESULT -ne 0 ]; then
    FAIL1="failure"
fi
if [ -s "$STDERR" ]; then
    FAIL2="error output"
fi
if [ -n "$FAIL1" -a -n "$FAIL2" ]; then
    FAIL="$FAIL1 and $FAIL2"
else
    FAIL="${FAIL1}${FAIL2}"
fi

# generate report
if [ -n "$FAIL" ]; then
    echo "shuck detected $FAIL for the command:"
    echo "$CMD"
    echo
    echo "exit code: $RESULT"
    if [ -s "$STDERR" ]; then
        echo
        echo "---------------------- stderr ----------------------"
        cat "$STDERR"
    fi
    echo
    echo "---------------------- stdout ----------------------"
    cat "$STDOUT"
    if [ "$XTRACE" != "$STDERR" ]; then
        echo
        echo "---------------------- trace ----------------------"
        # remove our xtrace prefix
        cat $XTRACE.tmp | 
            grep -v "${TRACEPATTERN}RESULT=" | 
            grep -v "${TRACEPATTERN}set +x" | 
            sed -e 's_^\(+\+\)'$WORKDIR':_\1_;'
        echo
    fi
    if [ "$opt_includeenv" = "1" ]; then
        echo
        echo "------------------ environment --------------------"
        cat $ENVLIST
    fi
fi

rm -f $STDOUT $STDERR $XTRACE $XTRACE.tmp $ENVLIST
rmdir $WORKDIR


